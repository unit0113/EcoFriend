"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/to-regex-range@5.0.1";
exports.ids = ["vendor-chunks/to-regex-range@5.0.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * to-regex-range <https://github.com/micromatch/to-regex-range>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Released under the MIT License.\n */ \nconst isNumber = __webpack_require__(/*! is-number */ \"(rsc)/./node_modules/.pnpm/is-number@7.0.0/node_modules/is-number/index.js\");\nconst toRegexRange = (min, max, options)=>{\n    if (isNumber(min) === false) {\n        throw new TypeError(\"toRegexRange: expected the first argument to be a number\");\n    }\n    if (max === void 0 || min === max) {\n        return String(min);\n    }\n    if (isNumber(max) === false) {\n        throw new TypeError(\"toRegexRange: expected the second argument to be a number.\");\n    }\n    let opts = {\n        relaxZeros: true,\n        ...options\n    };\n    if (typeof opts.strictZeros === \"boolean\") {\n        opts.relaxZeros = opts.strictZeros === false;\n    }\n    let relax = String(opts.relaxZeros);\n    let shorthand = String(opts.shorthand);\n    let capture = String(opts.capture);\n    let wrap = String(opts.wrap);\n    let cacheKey = min + \":\" + max + \"=\" + relax + shorthand + capture + wrap;\n    if (toRegexRange.cache.hasOwnProperty(cacheKey)) {\n        return toRegexRange.cache[cacheKey].result;\n    }\n    let a = Math.min(min, max);\n    let b = Math.max(min, max);\n    if (Math.abs(a - b) === 1) {\n        let result = min + \"|\" + max;\n        if (opts.capture) {\n            return `(${result})`;\n        }\n        if (opts.wrap === false) {\n            return result;\n        }\n        return `(?:${result})`;\n    }\n    let isPadded = hasPadding(min) || hasPadding(max);\n    let state = {\n        min,\n        max,\n        a,\n        b\n    };\n    let positives = [];\n    let negatives = [];\n    if (isPadded) {\n        state.isPadded = isPadded;\n        state.maxLen = String(state.max).length;\n    }\n    if (a < 0) {\n        let newMin = b < 0 ? Math.abs(b) : 1;\n        negatives = splitToPatterns(newMin, Math.abs(a), state, opts);\n        a = state.a = 0;\n    }\n    if (b >= 0) {\n        positives = splitToPatterns(a, b, state, opts);\n    }\n    state.negatives = negatives;\n    state.positives = positives;\n    state.result = collatePatterns(negatives, positives, opts);\n    if (opts.capture === true) {\n        state.result = `(${state.result})`;\n    } else if (opts.wrap !== false && positives.length + negatives.length > 1) {\n        state.result = `(?:${state.result})`;\n    }\n    toRegexRange.cache[cacheKey] = state;\n    return state.result;\n};\nfunction collatePatterns(neg, pos, options) {\n    let onlyNegative = filterPatterns(neg, pos, \"-\", false, options) || [];\n    let onlyPositive = filterPatterns(pos, neg, \"\", false, options) || [];\n    let intersected = filterPatterns(neg, pos, \"-?\", true, options) || [];\n    let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);\n    return subpatterns.join(\"|\");\n}\nfunction splitToRanges(min, max) {\n    let nines = 1;\n    let zeros = 1;\n    let stop = countNines(min, nines);\n    let stops = new Set([\n        max\n    ]);\n    while(min <= stop && stop <= max){\n        stops.add(stop);\n        nines += 1;\n        stop = countNines(min, nines);\n    }\n    stop = countZeros(max + 1, zeros) - 1;\n    while(min < stop && stop <= max){\n        stops.add(stop);\n        zeros += 1;\n        stop = countZeros(max + 1, zeros) - 1;\n    }\n    stops = [\n        ...stops\n    ];\n    stops.sort(compare);\n    return stops;\n}\n/**\n * Convert a range to a regex pattern\n * @param {Number} `start`\n * @param {Number} `stop`\n * @return {String}\n */ function rangeToPattern(start, stop, options) {\n    if (start === stop) {\n        return {\n            pattern: start,\n            count: [],\n            digits: 0\n        };\n    }\n    let zipped = zip(start, stop);\n    let digits = zipped.length;\n    let pattern = \"\";\n    let count = 0;\n    for(let i = 0; i < digits; i++){\n        let [startDigit, stopDigit] = zipped[i];\n        if (startDigit === stopDigit) {\n            pattern += startDigit;\n        } else if (startDigit !== \"0\" || stopDigit !== \"9\") {\n            pattern += toCharacterClass(startDigit, stopDigit, options);\n        } else {\n            count++;\n        }\n    }\n    if (count) {\n        pattern += options.shorthand === true ? \"\\\\d\" : \"[0-9]\";\n    }\n    return {\n        pattern,\n        count: [\n            count\n        ],\n        digits\n    };\n}\nfunction splitToPatterns(min, max, tok, options) {\n    let ranges = splitToRanges(min, max);\n    let tokens = [];\n    let start = min;\n    let prev;\n    for(let i = 0; i < ranges.length; i++){\n        let max = ranges[i];\n        let obj = rangeToPattern(String(start), String(max), options);\n        let zeros = \"\";\n        if (!tok.isPadded && prev && prev.pattern === obj.pattern) {\n            if (prev.count.length > 1) {\n                prev.count.pop();\n            }\n            prev.count.push(obj.count[0]);\n            prev.string = prev.pattern + toQuantifier(prev.count);\n            start = max + 1;\n            continue;\n        }\n        if (tok.isPadded) {\n            zeros = padZeros(max, tok, options);\n        }\n        obj.string = zeros + obj.pattern + toQuantifier(obj.count);\n        tokens.push(obj);\n        start = max + 1;\n        prev = obj;\n    }\n    return tokens;\n}\nfunction filterPatterns(arr, comparison, prefix, intersection, options) {\n    let result = [];\n    for (let ele of arr){\n        let { string } = ele;\n        // only push if _both_ are negative...\n        if (!intersection && !contains(comparison, \"string\", string)) {\n            result.push(prefix + string);\n        }\n        // or _both_ are positive\n        if (intersection && contains(comparison, \"string\", string)) {\n            result.push(prefix + string);\n        }\n    }\n    return result;\n}\n/**\n * Zip strings\n */ function zip(a, b) {\n    let arr = [];\n    for(let i = 0; i < a.length; i++)arr.push([\n        a[i],\n        b[i]\n    ]);\n    return arr;\n}\nfunction compare(a, b) {\n    return a > b ? 1 : b > a ? -1 : 0;\n}\nfunction contains(arr, key, val) {\n    return arr.some((ele)=>ele[key] === val);\n}\nfunction countNines(min, len) {\n    return Number(String(min).slice(0, -len) + \"9\".repeat(len));\n}\nfunction countZeros(integer, zeros) {\n    return integer - integer % Math.pow(10, zeros);\n}\nfunction toQuantifier(digits) {\n    let [start = 0, stop = \"\"] = digits;\n    if (stop || start > 1) {\n        return `{${start + (stop ? \",\" + stop : \"\")}}`;\n    }\n    return \"\";\n}\nfunction toCharacterClass(a, b, options) {\n    return `[${a}${b - a === 1 ? \"\" : \"-\"}${b}]`;\n}\nfunction hasPadding(str) {\n    return /^-?(0+)\\d/.test(str);\n}\nfunction padZeros(value, tok, options) {\n    if (!tok.isPadded) {\n        return value;\n    }\n    let diff = Math.abs(tok.maxLen - String(value).length);\n    let relax = options.relaxZeros !== false;\n    switch(diff){\n        case 0:\n            return \"\";\n        case 1:\n            return relax ? \"0?\" : \"0\";\n        case 2:\n            return relax ? \"0{0,2}\" : \"00\";\n        default:\n            {\n                return relax ? `0{0,${diff}}` : `0{${diff}}`;\n            }\n    }\n}\n/**\n * Cache\n */ toRegexRange.cache = {};\ntoRegexRange.clearCache = ()=>toRegexRange.cache = {};\n/**\n * Expose `toRegexRange`\n */ module.exports = toRegexRange;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js\n");

/***/ })

};
;